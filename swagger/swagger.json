{
    "swagger": "2.0",
    "info": {
        "title": "Casibase RESTful API",
        "description": "Swagger Docs of Casibase Backend API",
        "version": "1.70.0",
        "contact": {
            "email": "admin@casbin.org"
        }
    },
    "basePath": "/api",
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/add-chat": {
            "post": {
                "tags": [
                    "Chat API"
                ],
                "description": "Adds a new chat to the system.",
                "operationId": "ApiController.AddChat",
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the add operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/add-factorset": {
            "post": {
                "tags": [
                    "Factorset API"
                ],
                "description": "Adds a new factorset to the database.",
                "operationId": "ApiController.Add Factorset",
                "parameters": [
                    {
                        "in": "body",
                        "name": "factorset",
                        "description": "The factorset data to be added.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Factorset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the factorset was successfully added, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body or accessing the database.\""
                    }
                }
            }
        },
        "/add-message": {
            "post": {
                "tags": [
                    "Message API"
                ],
                "description": "Adds a new message to the system.",
                "operationId": "ApiController.AddMessage",
                "responses": {
                    "200": {
                        "description": "\"The response object contains the chat information related to the new message.\"",
                        "schema": {
                            "$ref": "#/definitions/object.Chat"
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/add-provider": {
            "post": {
                "tags": [
                    "Provider API"
                ],
                "description": "Adds a new provider to the database.",
                "operationId": "ApiController.Add Provider",
                "parameters": [
                    {
                        "in": "body",
                        "name": "provider",
                        "description": "The provider data to be added.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.Provider"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the provider was successfully added, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if the provider data is invalid.\""
                    }
                }
            }
        },
        "/add-store": {
            "post": {
                "tags": [
                    "Store API"
                ],
                "description": "Adds a new store to the system.",
                "operationId": "ApiController.AddStore",
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the add operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/add-video": {
            "post": {
                "tags": [
                    "Video API"
                ],
                "description": "Adds a new video to the database.",
                "operationId": "ApiController.Add Video",
                "parameters": [
                    {
                        "in": "body",
                        "name": "video",
                        "description": "The video data to be added.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Video"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the video was successfully added, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body or accessing the database.\""
                    }
                }
            }
        },
        "/add-wordset": {
            "post": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Adds a new wordset to the database.",
                "operationId": "ApiController.Add Wordset",
                "parameters": [
                    {
                        "in": "body",
                        "name": "wordset",
                        "description": "The wordset data to be added.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Wordset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the wordset was successfully added, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body or accessing the database.\""
                    }
                }
            }
        },
        "/delete-chat": {
            "post": {
                "tags": [
                    "Chat API"
                ],
                "description": "Deletes an existing chat from the system. Also deletes all messages associated with this chat.",
                "operationId": "ApiController.DeleteChat",
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the delete operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/delete-factorset": {
            "delete": {
                "tags": [
                    "Factorset API"
                ],
                "description": "Deletes a factorset from the database.",
                "operationId": "ApiController.Delete Factorset",
                "parameters": [
                    {
                        "in": "body",
                        "name": "factorset",
                        "description": "The factorset data to be deleted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Factorset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the factorset was successfully deleted, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body or accessing the database.\""
                    }
                }
            }
        },
        "/delete-message": {
            "post": {
                "tags": [
                    "Message API"
                ],
                "description": "Deletes an existing message from the system.",
                "operationId": "ApiController.DeleteMessage",
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the delete operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/delete-provider": {
            "delete": {
                "tags": [
                    "Provider API"
                ],
                "description": "Deletes a provider from the database.",
                "operationId": "ApiController.Delete Provider",
                "parameters": [
                    {
                        "in": "body",
                        "name": "provider",
                        "description": "The provider data to be deleted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.Provider"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the provider was successfully deleted, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        },
        "/delete-store": {
            "post": {
                "tags": [
                    "Store API"
                ],
                "description": "Deletes an existing store from the system.",
                "operationId": "ApiController.DeleteStore",
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the delete operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/delete-video": {
            "delete": {
                "tags": [
                    "Video API"
                ],
                "description": "Deletes a video from the database.",
                "operationId": "ApiController.Delete Video",
                "parameters": [
                    {
                        "in": "body",
                        "name": "video",
                        "description": "The video data to be deleted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Video"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the video was successfully deleted, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body or accessing the database.\""
                    }
                }
            }
        },
        "/delete-wordset": {
            "delete": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Deletes a wordset from the database.",
                "operationId": "ApiController.Delete Wordset",
                "parameters": [
                    {
                        "in": "body",
                        "name": "wordset",
                        "description": "The wordset data to be deleted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Wordset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the wordset was successfully deleted, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body or accessing the database.\""
                    }
                }
            }
        },
        "/get-chat": {
            "get": {
                "tags": [
                    "Chat API"
                ],
                "description": "Retrieves a single chat by its ID.",
                "operationId": "ApiController.GetChat",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the chat to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"The response object contains the detailed information of the retrieved chat.\"",
                        "schema": {
                            "$ref": "#/definitions/object.Chat"
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/get-chats": {
            "get": {
                "tags": [
                    "Chat API"
                ],
                "description": "Retrieves chats based on a specific field and its value, or for a specific user.",
                "operationId": "ApiController.GetChats",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user",
                        "description": "The user associated with the chats to retrieve.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "field",
                        "description": "The field to filter the chats (e.g., 'user').",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "value",
                        "description": "The value for the specified field to filter the chats.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"The response object contains an array of chats.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/object.Chat"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/get-factorset": {
            "get": {
                "tags": [
                    "Factorset API"
                ],
                "description": "Retrieves a specific factorset from the database based on its ID.",
                "operationId": "ApiController.Get Factorset",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the factorset to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{*Factorset} Factorset \"The factorset object if found.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the provided ID is invalid.\""
                    }
                }
            }
        },
        "/get-factorsets": {
            "get": {
                "tags": [
                    "Factorset API"
                ],
                "description": "Retrieves factorsets belonging to a specific owner from the database.",
                "operationId": "ApiController.Get Factorsets",
                "parameters": [
                    {
                        "in": "query",
                        "name": "owner",
                        "description": "The owner of the factorsets to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"An array of factorset objects owned by the specified owner.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/*Factorset"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the owner is invalid.\""
                    }
                }
            }
        },
        "/get-global-chats": {
            "get": {
                "tags": [
                    "Chat API"
                ],
                "description": "Retrieves all global chats available in the system.",
                "operationId": "ApiController.GetGlobalChats",
                "responses": {
                    "200": {
                        "description": "\"The response object contains an array of global chats.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/object.Chat"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/get-global-factorsets": {
            "get": {
                "tags": [
                    "Factorset API"
                ],
                "description": "Retrieves all factorsets from the database.",
                "operationId": "ApiController.Get Global Factorsets",
                "responses": {
                    "200": {
                        "description": "\"An array of factorset objects.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/*Factorset"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database.\""
                    }
                }
            }
        },
        "/get-global-messages": {
            "get": {
                "tags": [
                    "Message API"
                ],
                "description": "Retrieves all global messages.",
                "operationId": "ApiController.GetGlobalMessages",
                "responses": {
                    "200": {
                        "description": "\"The response object contains an array of global messages.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/object.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/get-global-stores": {
            "get": {
                "tags": [
                    "Store API"
                ],
                "description": "get global stores",
                "operationId": "ApiController.GetGlobalStores",
                "responses": {
                    "200": {
                        "description": "The Response object",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/object.Cert"
                            }
                        }
                    }
                }
            }
        },
        "/get-global-videos": {
            "get": {
                "tags": [
                    "Video API"
                ],
                "description": "Retrieves all videos from the database.",
                "operationId": "ApiController.Get Global Videos",
                "responses": {
                    "200": {
                        "description": "\"An array of video objects.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/*Video"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database.\""
                    }
                }
            }
        },
        "/get-global-wordsets": {
            "get": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Retrieves all wordsets from the database.",
                "operationId": "ApiController.Get Global Wordsets",
                "responses": {
                    "200": {
                        "description": "\"An array of wordset objects.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/*Wordset"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database.\""
                    }
                }
            }
        },
        "/get-message": {
            "get": {
                "tags": [
                    "Message API"
                ],
                "description": "Retrieves a single message by its ID.",
                "operationId": "ApiController.GetMessage",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the message to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"The response object contains the detailed information of the retrieved message.\"",
                        "schema": {
                            "$ref": "#/definitions/object.Message"
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/get-messages": {
            "get": {
                "tags": [
                    "Message API"
                ],
                "description": "Retrieves messages for a specific user and/or chat.",
                "operationId": "ApiController.GetMessages",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user",
                        "description": "The user for whom to retrieve messages.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "chat",
                        "description": "The chat for which to retrieve messages.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"The response object contains an array of messages.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/object.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/get-store": {
            "get": {
                "tags": [
                    "Store API"
                ],
                "description": "Retrieves a single store based on its ID.",
                "operationId": "ApiController.GetStore",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the store to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response object contains the store information.",
                        "schema": {
                            "$ref": "#/definitions/object.Store"
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/get-stores": {
            "get": {
                "tags": [
                    "Store API"
                ],
                "description": "Retrieve stores based on the owner.",
                "operationId": "ApiController.GetStores",
                "parameters": [
                    {
                        "in": "query",
                        "name": "owner",
                        "description": "The owner of the stores to retrieve.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response object contains an array of stores.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/object.Store"
                            }
                        }
                    }
                }
            }
        },
        "/get-video": {
            "get": {
                "tags": [
                    "Video API"
                ],
                "description": "Retrieves a specific video from the database based on its ID.",
                "operationId": "ApiController.Get Video",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the video to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{*Video} Video \"The video object if found.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the provided ID is invalid.\""
                    }
                }
            }
        },
        "/get-videos": {
            "get": {
                "tags": [
                    "Video API"
                ],
                "description": "Retrieves videos belonging to a specific owner from the database, with optional processing of label and segment counts.",
                "operationId": "ApiController.Get Videos",
                "parameters": [
                    {
                        "in": "query",
                        "name": "owner",
                        "description": "The owner of the videos to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"An array of video objects owned by the specified owner.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/*Video"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the owner is invalid.\""
                    }
                }
            }
        },
        "/get-wordset": {
            "get": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Retrieves a specific wordset from the database based on its ID.",
                "operationId": "ApiController.Get Wordset",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the wordset to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{*Wordset} Wordset \"The wordset object if found.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the ID is invalid.\""
                    }
                }
            }
        },
        "/get-wordset-graph": {
            "get": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Retrieves a graph representation of a specific wordset from the database based on its ID, with optional clustering and distance limit.",
                "operationId": "ApiController.Get Wordset Graph",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the wordset to retrieve the graph for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "clusterNumber",
                        "description": "The number of clusters to generate (optional).",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "distanceLimit",
                        "description": "The distance limit for clustering (optional).",
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{*} interface{} \"The graph representation of the wordset.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the parameters are invalid.\""
                    }
                }
            }
        },
        "/get-wordset-match": {
            "get": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Retrieves a matching wordset from the database based on the provided ID.",
                "operationId": "ApiController.Get Wordset Match",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID used to identify the wordset to retrieve the matching wordset for.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{*Wordset} Wordset \"The matching wordset object if found.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the provided ID is invalid.\""
                    }
                }
            }
        },
        "/get-wordsets": {
            "get": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Retrieves wordsets belonging to a specific owner from the database.",
                "operationId": "ApiController.Get Wordsets",
                "parameters": [
                    {
                        "in": "query",
                        "name": "owner",
                        "description": "The owner of the wordsets to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"An array of wordset objects owned by the specified owner.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/*Wordset"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue accessing the database or the owner is invalid.\""
                    }
                }
            }
        },
        "/global-providers": {
            "get": {
                "tags": [
                    "Provider API"
                ],
                "description": "Retrieves global providers from the database.",
                "operationId": "ApiController.Get Global Providers",
                "responses": {
                    "200": {
                        "description": "\"An array of global providers.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Provider"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database.\""
                    }
                }
            }
        },
        "/global-vectors": {
            "get": {
                "tags": [
                    "Vector API"
                ],
                "description": "Retrieves global vectors from the database.",
                "operationId": "ApiController.Get Global Vectors",
                "responses": {
                    "200": {
                        "description": "\"An array of global vectors.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Vector"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database.\""
                    }
                }
            }
        },
        "/provider": {
            "get": {
                "tags": [
                    "Provider API"
                ],
                "description": "Retrieves a provider by its ID from the database.",
                "operationId": "ApiController.Get Provider",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the provider to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"The provider with the specified ID.\"",
                        "schema": {
                            "$ref": "#/definitions/Provider"
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        },
        "/providers": {
            "get": {
                "tags": [
                    "Provider API"
                ],
                "description": "Retrieves providers belonging to a specific owner from the database.",
                "operationId": "ApiController.Get Providers",
                "parameters": [
                    {
                        "in": "query",
                        "name": "owner",
                        "description": "The owner of the providers to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"An array of providers belonging to the specified owner.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Provider"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        },
        "/refresh-store-vectors": {
            "post": {
                "tags": [
                    "Store API"
                ],
                "description": "Refreshes the vector information for a specific store.",
                "operationId": "ApiController.RefreshStoreVectors",
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the refresh operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/task": {
            "get": {
                "tags": [
                    "Task API"
                ],
                "description": "Retrieves a specific task from the database.",
                "operationId": "ApiController.Get Task",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the task to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"The task with the specified ID.\"",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            },
            "put": {
                "tags": [
                    "Task API"
                ],
                "description": "Updates a specific task in the database.",
                "operationId": "ApiController.Update Task",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the task to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "task",
                        "description": "The updated task data.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the task was successfully updated, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            },
            "post": {
                "tags": [
                    "Task API"
                ],
                "description": "Adds a new task to the database.",
                "operationId": "ApiController.Add Task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "task",
                        "description": "The task data to be added.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the task was successfully added, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task API"
                ],
                "description": "Deletes a specific task from the database.",
                "operationId": "ApiController.Delete Task",
                "parameters": [
                    {
                        "in": "body",
                        "name": "task",
                        "description": "The task data to be deleted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the task was successfully deleted, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "tags": [
                    "Task API"
                ],
                "description": "Retrieves tasks belonging to a specific owner from the database.",
                "operationId": "ApiController.Get Tasks",
                "parameters": [
                    {
                        "in": "query",
                        "name": "owner",
                        "description": "The owner of the tasks.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"An array of tasks belonging to the specified owner.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        },
        "/tasks/global": {
            "get": {
                "tags": [
                    "Task API"
                ],
                "description": "Retrieves all global tasks from the database.",
                "operationId": "ApiController.Get Global Tasks",
                "responses": {
                    "200": {
                        "description": "\"An array of global tasks.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database.\""
                    }
                }
            }
        },
        "/update-chat": {
            "post": {
                "tags": [
                    "Chat API"
                ],
                "description": "Updates an existing chat based on its ID.",
                "operationId": "ApiController.UpdateChat",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the chat to update.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the update operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/update-factorset": {
            "put": {
                "tags": [
                    "Factorset API"
                ],
                "description": "Updates a factorset in the database based on the provided ID and data.",
                "operationId": "ApiController.Update Factorset",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID used to identify the factorset to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "factorset",
                        "description": "The updated factorset data.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Factorset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the factorset was successfully updated, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body, accessing the database, or the provided ID is invalid.\""
                    }
                }
            }
        },
        "/update-message": {
            "post": {
                "tags": [
                    "Message API"
                ],
                "description": "Updates an existing message based on its ID.",
                "operationId": "ApiController.UpdateMessage",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the message to update.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the update operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/update-provider": {
            "put": {
                "tags": [
                    "Provider API"
                ],
                "description": "Updates a provider's information in the database.",
                "operationId": "ApiController.Update Provider",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the provider to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "provider",
                        "description": "The updated provider information.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.Provider"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the provider was successfully updated, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        },
        "/update-store": {
            "post": {
                "tags": [
                    "Store API"
                ],
                "description": "Updates an existing store's information.",
                "operationId": "ApiController.UpdateStore",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the store to update.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"The success status of the update operation.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure.\""
                    }
                }
            }
        },
        "/update-video": {
            "put": {
                "tags": [
                    "Video API"
                ],
                "description": "Updates a video in the database based on the provided ID and data.",
                "operationId": "ApiController.Update Video",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID used to identify the video to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "video",
                        "description": "The updated video data.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Video"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the video was successfully updated, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body, accessing the database, or the provided ID is invalid.\""
                    }
                }
            }
        },
        "/update-wordset": {
            "put": {
                "tags": [
                    "Wordset API"
                ],
                "description": "Updates a wordset in the database based on the provided ID and data.",
                "operationId": "ApiController.Update Wordset",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID used to identify the wordset to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "wordset",
                        "description": "The updated wordset data.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Wordset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the wordset was successfully updated, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including if there's an issue with the request body, accessing the database, or the provided ID is invalid.\""
                    }
                }
            }
        },
        "/upload-video": {
            "post": {
                "tags": [
                    "Video API"
                ],
                "description": "Uploads a video file, extracts audio, and processes it to create segments. Then, it uploads the video and audio files to storage and adds the video data to the database.",
                "operationId": "ApiController.Upload Video",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "file",
                        "description": "The video file to upload.",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} string \"The ID of the uploaded video.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with file upload, audio extraction, storage, or database operations.\""
                    }
                }
            }
        },
        "/vector": {
            "get": {
                "tags": [
                    "Vector API"
                ],
                "description": "Retrieves a vector by its ID from the database.",
                "operationId": "ApiController.Get Vector",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the vector to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"The vector retrieved by its ID.\"",
                        "schema": {
                            "$ref": "#/definitions/Vector"
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            },
            "put": {
                "tags": [
                    "Vector API"
                ],
                "description": "Updates a vector in the database.",
                "operationId": "ApiController.Update Vector",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "The ID of the vector to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "vector",
                        "description": "The updated vector data.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.Vector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the vector was successfully updated, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            },
            "post": {
                "tags": [
                    "Vector API"
                ],
                "description": "Adds a new vector to the database.",
                "operationId": "ApiController.Add Vector",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vector",
                        "description": "The vector data to be added.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.Vector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the vector was successfully added, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            },
            "delete": {
                "tags": [
                    "Vector API"
                ],
                "description": "Deletes a vector from the database.",
                "operationId": "ApiController.Delete Vector",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vector",
                        "description": "The vector data to be deleted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.Vector"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{boolean} bool \"True if the vector was successfully deleted, false otherwise.\""
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        },
        "/vectors": {
            "get": {
                "tags": [
                    "Vector API"
                ],
                "description": "Retrieves vectors belonging to a specific owner from the database.",
                "operationId": "ApiController.Get Vectors",
                "parameters": [
                    {
                        "in": "query",
                        "name": "owner",
                        "description": "The owner of the vectors to retrieve.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"An array of vectors belonging to the specified owner.\"",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Vector"
                            }
                        }
                    },
                    "400": {
                        "description": "{string} string \"The error message in case of failure, including issues with accessing the database or invalid parameters.\""
                    }
                }
            }
        }
    },
    "definitions": {
        "*Factorset": {
            "title": "*Factorset",
            "type": "object"
        },
        "*Video": {
            "title": "*Video",
            "type": "object"
        },
        "*Wordset": {
            "title": "*Wordset",
            "type": "object"
        },
        "80341.File": {
            "title": "File",
            "type": "object"
        },
        "81487.Properties": {
            "title": "Properties",
            "type": "object"
        },
        "Factorset": {
            "title": "Factorset",
            "type": "object"
        },
        "Provider": {
            "title": "Provider",
            "type": "object"
        },
        "Task": {
            "title": "Task",
            "type": "object"
        },
        "Vector": {
            "title": "Vector",
            "type": "object"
        },
        "Video": {
            "title": "Video",
            "type": "object"
        },
        "Wordset": {
            "title": "Wordset",
            "type": "object"
        },
        "object.Cert": {
            "title": "Cert",
            "type": "object"
        },
        "object.Chat": {
            "title": "Chat",
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "clientIp": {
                    "type": "string"
                },
                "clientIpDesc": {
                    "type": "string"
                },
                "createdTime": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "messageCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "store": {
                    "type": "string"
                },
                "tokenCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "type": {
                    "type": "string"
                },
                "updatedTime": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "user1": {
                    "type": "string"
                },
                "user2": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "string"
                },
                "userAgentDesc": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "object.File": {
            "title": "File",
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/object.File"
                    }
                },
                "createdTime": {
                    "type": "string"
                },
                "isLeaf": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "object.Message": {
            "title": "Message",
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "chat": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdTime": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "errorText": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "isHidden": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "needNotify": {
                    "type": "boolean"
                },
                "organization": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "replyTo": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "tokenCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "user": {
                    "type": "string"
                },
                "vectorScores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/object.VectorScore"
                    }
                }
            }
        },
        "object.Provider": {
            "title": "Provider",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "createdTime": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "frequencyPenalty": {
                    "type": "number",
                    "format": "float"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "presencePenalty": {
                    "type": "number",
                    "format": "float"
                },
                "providerUrl": {
                    "type": "string"
                },
                "subType": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number",
                    "format": "float"
                },
                "topK": {
                    "type": "integer",
                    "format": "int64"
                },
                "topP": {
                    "type": "number",
                    "format": "float"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "object.Store": {
            "title": "Store",
            "type": "object",
            "properties": {
                "createdTime": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "embeddingProvider": {
                    "type": "string"
                },
                "fileTree": {
                    "$ref": "#/definitions/object.File"
                },
                "frequency": {
                    "type": "integer",
                    "format": "int64"
                },
                "imageProvider": {
                    "type": "string"
                },
                "limitMinutes": {
                    "type": "integer",
                    "format": "int64"
                },
                "memoryLimit": {
                    "type": "integer",
                    "format": "int64"
                },
                "modelProvider": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "prompt": {
                    "type": "string"
                },
                "propertiesMap": {
                    "$ref": "#/definitions/81487.Properties"
                },
                "splitProvider": {
                    "type": "string"
                },
                "storageProvider": {
                    "type": "string"
                },
                "welcome": {
                    "type": "string"
                }
            }
        },
        "object.Vector": {
            "title": "Vector",
            "type": "object",
            "properties": {
                "createdTime": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "dimension": {
                    "type": "integer",
                    "format": "int64"
                },
                "displayName": {
                    "type": "string"
                },
                "file": {
                    "type": "string"
                },
                "index": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "provider": {
                    "type": "string"
                },
                "score": {
                    "type": "number",
                    "format": "float"
                },
                "store": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "tokenCount": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "object.VectorScore": {
            "title": "VectorScore",
            "type": "object",
            "properties": {
                "score": {
                    "type": "number",
                    "format": "float"
                },
                "vector": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "AccessToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}